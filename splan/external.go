package splan

/////////////////////////////////////////////////////////////////
//Code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"log"
	"os"
)

const (
	JsonOut = iota
	XmlOut
	CountAll
)

var toJson bool = false
var toXml bool = false
var oneLevelDown bool = false
var countAll bool = false
var musage bool = false

var uniqueFlags = []*bool{
	&toJson,
	&toXml,
	&countAll}

var filename = "/home/nmelzer/gopath/src/github.com/NobbZ/wsws-splan/plan.xml"

var out int = -1

var counters map[string]*int

func handleFeed(se xml.StartElement, decoder *xml.Decoder, outFlag *bool) {
	if outFlag == &countAll {
		incrementCounter(se.Name.Space, se.Name.Local)
	} else {
		if !oneLevelDown {
			if se.Name.Local == "splan" && se.Name.Space == "" {
				var item Chisplan
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}
		} else {
			if se.Name.Local == "mitarbeiter" && se.Name.Space == "" {
				var item Chimitarbeiter
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "fachrichtungen" && se.Name.Space == "" {
				var item Chifachrichtungen
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "erstellung" && se.Name.Space == "" {
				var item Chierstellung
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "tage" && se.Name.Space == "" {
				var item Chitage
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "raeume" && se.Name.Space == "" {
				var item Chiraeume
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "veranstaltungen" && se.Name.Space == "" {
				var item Chiveranstaltungen
				decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "zeiten" && se.Name.Space == "" {
				var item Chizeiten
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "fbmatrix" && se.Name.Space == "" {
				var item Chifbmatrix
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

			if se.Name.Local == "hilfsmittel" && se.Name.Space == "" {
				var item Chihilfsmittel
				_ = decoder.DecodeElement(&item, &se)
				switch outFlag {
				case &toJson:
					writeJson(item)
				case &toXml:
					writeXml(item)
				}
			}

		}
	}
}

func makeKey(space string, local string) string {
	if space == "" {
		space = "_"
	}
	return space + ":" + local
}

func incrementCounter(space string, local string) {
	key := makeKey(space, local)

	counter, ok := counters[key]
	if !ok {
		n := 1
		counters[key] = &n
	} else {
		newv := *counter + 1
		counters[key] = &newv
	}
}

func writeJson(item interface{}) {
	b, err := json.MarshalIndent(item, "", " ")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(b))
}

func writeXml(item interface{}) {
	output, err := xml.MarshalIndent(item, "  ", "    ")
	if err != nil {
		fmt.Printf("error: %v\n", err)
	}
	_, _ = os.Stdout.Write(output)
}

///////////////////////////
/// structs
///////////////////////////

type Chiroot struct {
	Chisplan *Chisplan `xml:" splan,omitempty" json:"splan,omitempty"`
}

type Chisplan struct {
	Chierstellung      *Chierstellung      `xml:" erstellung,omitempty" json:"erstellung,omitempty"`
	Chifachrichtungen  *Chifachrichtungen  `xml:" fachrichtungen,omitempty" json:"fachrichtungen,omitempty"`
	Chifbmatrix        *Chifbmatrix        `xml:" fbmatrix,omitempty" json:"fbmatrix,omitempty"`
	Chihilfsmittel     *Chihilfsmittel     `xml:" hilfsmittel,omitempty" json:"hilfsmittel,omitempty"`
	Chimitarbeiter     *Chimitarbeiter     `xml:" mitarbeiter,omitempty" json:"mitarbeiter,omitempty"`
	Chiraeume          *Chiraeume          `xml:" raeume,omitempty" json:"raeume,omitempty"`
	Chitage            *Chitage            `xml:" tage,omitempty" json:"tage,omitempty"`
	Chiveranstaltungen *Chiveranstaltungen `xml:" veranstaltungen,omitempty" json:"veranstaltungen,omitempty"`
	Chizeiten          *Chizeiten          `xml:" zeiten,omitempty" json:"zeiten,omitempty"`
}

type Chierstellung struct {
	Chiautor          *Chiautor          `xml:" autor,omitempty" json:"autor,omitempty"`
	Chidatum          *Chidatum          `xml:" datum,omitempty" json:"datum,omitempty"`
	Chihochschulsport *Chihochschulsport `xml:" hochschulsport,omitempty" json:"hochschulsport,omitempty"`
	Chiproginfo       *Chiproginfo       `xml:" proginfo,omitempty" json:"proginfo,omitempty"`
	Chisemestertyp    *Chisemestertyp    `xml:" semestertyp,omitempty" json:"semestertyp,omitempty"`
	Chiuhrzeit        *Chiuhrzeit        `xml:" uhrzeit,omitempty" json:"uhrzeit,omitempty"`
	Chiversion        *Chiversion        `xml:" version,omitempty" json:"version,omitempty"`
}

type Chiuhrzeit struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chidatum struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chiversion struct {
	Text float32 `xml:",chardata" json:",omitempty"`
}

type Chiproginfo struct {
	Chia *Chia  `xml:" a,omitempty" json:"a,omitempty"`
	Text string `xml:",chardata" json:",omitempty"`
}

type Chia struct {
	Attr_href string `xml:" href,attr"  json:",omitempty"`
	Text      string `xml:",chardata" json:",omitempty"`
}

type Chihochschulsport struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chiautor struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chisemestertyp struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chitage struct {
	Chitag []*Chitag `xml:" tag,omitempty" json:"tag,omitempty"`
}

type Chitag struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
	Text           string          `xml:",chardata" json:",omitempty"`
}

type Chiid struct {
	Text int16 `xml:",chardata" json:",omitempty"`
}

type Chibezeichnung struct {
	Chikuerzel   *Chikuerzel   `xml:" kuerzel,omitempty" json:"kuerzel,omitempty"`
	Chikurz      *Chikurz      `xml:" kurz,omitempty" json:"kurz,omitempty"`
	Chilang      *Chilang      `xml:" lang,omitempty" json:"lang,omitempty"`
	Chinachname  *Chinachname  `xml:" nachname,omitempty" json:"nachname,omitempty"`
	Chiteilnahme *Chiteilnahme `xml:" teilnahme,omitempty" json:"teilnahme,omitempty"`
	Chivorname   *Chivorname   `xml:" vorname,omitempty" json:"vorname,omitempty"`
	Text         string        `xml:",chardata" json:",omitempty"`
}

type Chikurz struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chilang struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chizeiten struct {
	Chizeit []*Chizeit `xml:" zeit,omitempty" json:"zeit,omitempty"`
}

type Chizeit struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
	Text           string          `xml:",chardata" json:",omitempty"`
}

type Chiraeume struct {
	Chiraum []*Chiraum `xml:" raum,omitempty" json:"raum,omitempty"`
}

type Chiraum struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
	Text           string          `xml:",chardata" json:",omitempty"`
}

type Chimitarbeiter struct {
	Chidozent *Chidozent `xml:" dozent,omitempty" json:"dozent,omitempty"`
	Chihoerer *Chihoerer `xml:" hoerer,omitempty" json:"hoerer,omitempty"`
	Chityp    []*Chityp  `xml:" typ,omitempty" json:"typ,omitempty"`
}

type Chityp struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
	Chiperson      []*Chiperson    `xml:" person,omitempty" json:"person,omitempty"`
}

type Chiperson struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
}

type Chikuerzel struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chivorname struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chinachname struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chiteilnahme struct {
	Text bool `xml:",chardata" json:",omitempty"`
}

type Chifachrichtungen struct {
	Chiassistenten *Chiassistenten `xml:" assistenten,omitempty" json:"assistenten,omitempty"`
	Chifh          *Chifh          `xml:" fh,omitempty" json:"fh,omitempty"`
	Chimaxsem      *Chimaxsem      `xml:" maxsem,omitempty" json:"maxsem,omitempty"`
	Chiptl         *Chiptl         `xml:" ptl,omitempty" json:"ptl,omitempty"`
	Chiteilnehmer  *Chiteilnehmer  `xml:" teilnehmer,omitempty" json:"teilnehmer,omitempty"`
}

type Chimaxsem struct {
	Text int8 `xml:",chardata" json:",omitempty"`
}

type Chifh struct {
	Chifachrichtung []*Chifachrichtung `xml:" fachrichtung,omitempty" json:"fachrichtung,omitempty"`
}

type Chifachrichtung struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
	Chisemester    *Chisemester    `xml:" semester,omitempty" json:"semester,omitempty"`
}

type Chisemester struct {
	Chisem []*Chisem `xml:" sem,omitempty" json:"sem,omitempty"`
}

type Chisem struct {
	Text int8 `xml:",chardata" json:",omitempty"`
}

type Chiptl struct {
	Chifachrichtung []*Chifachrichtung `xml:" fachrichtung,omitempty" json:"fachrichtung,omitempty"`
}

type Chifbmatrix struct {
	Chizeile []*Chizeile `xml:" zeile,omitempty" json:"zeile,omitempty"`
}

type Chizeile struct {
	Chispalte []*Chispalte `xml:" spalte,omitempty" json:"spalte,omitempty"`
}

type Chispalte struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chihilfsmittel struct {
	Chihilfe *Chihilfe `xml:" hilfe,omitempty" json:"hilfe,omitempty"`
}

type Chihilfe struct {
	Chibezeichnung *Chibezeichnung `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chiid          []*Chiid        `xml:" id,omitempty" json:"id,omitempty"`
}

type Chiveranstaltungen struct {
	Chiveranstaltung []*Chiveranstaltung `xml:" veranstaltung,omitempty" json:"veranstaltung,omitempty"`
}

type Chiveranstaltung struct {
	Chibez_zusatz     *Chibez_zusatz     `xml:" bez_zusatz,omitempty" json:"bez_zusatz,omitempty"`
	Chibezeichnung    *Chibezeichnung    `xml:" bezeichnung,omitempty" json:"bezeichnung,omitempty"`
	Chifachrichtungen *Chifachrichtungen `xml:" fachrichtungen,omitempty" json:"fachrichtungen,omitempty"`
	Chifbdarstellung  *Chifbdarstellung  `xml:" fbdarstellung,omitempty" json:"fbdarstellung,omitempty"`
	Chifreiwillig     *Chifreiwillig     `xml:" freiwillig,omitempty" json:"freiwillig,omitempty"`
	Chiid             []*Chiid           `xml:" id,omitempty" json:"id,omitempty"`
	Chimitarbeiter    *Chimitarbeiter    `xml:" mitarbeiter,omitempty" json:"mitarbeiter,omitempty"`
	Chiparent         *Chiparent         `xml:" parent,omitempty" json:"parent,omitempty"`
	Chistunden        *Chistunden        `xml:" stunden,omitempty" json:"stunden,omitempty"`
	Chitermine        *Chitermine        `xml:" termine,omitempty" json:"termine,omitempty"`
	Chiurl            *Chiurl            `xml:" url,omitempty" json:"url,omitempty"`
	Chivereinbarung   *Chivereinbarung   `xml:" vereinbarung,omitempty" json:"vereinbarung,omitempty"`
	Chivverzeichnis   *Chivverzeichnis   `xml:" vverzeichnis,omitempty" json:"vverzeichnis,omitempty"`
}

type Chiparent struct {
}

type Chibez_zusatz struct {
	Text string `xml:",chardata" json:",omitempty"`
}

type Chiurl struct {
}

type Chivverzeichnis struct {
	Text bool `xml:",chardata" json:",omitempty"`
}

type Chistunden struct {
	Text int8 `xml:",chardata" json:",omitempty"`
}

type Chifbdarstellung struct {
	Text bool `xml:",chardata" json:",omitempty"`
}

type Chivereinbarung struct {
	Text bool `xml:",chardata" json:",omitempty"`
}

type Chifreiwillig struct {
	Text bool `xml:",chardata" json:",omitempty"`
}

type Chitermine struct {
	Chitermin []*Chitermin `xml:" termin,omitempty" json:"termin,omitempty"`
}

type Chitermin struct {
	Chiraeume *Chiraeume `xml:" raeume,omitempty" json:"raeume,omitempty"`
	Chitag    []*Chitag  `xml:" tag,omitempty" json:"tag,omitempty"`
	Chizeit   []*Chizeit `xml:" zeit,omitempty" json:"zeit,omitempty"`
}

type Chidozent struct {
	Chiid []*Chiid `xml:" id,omitempty" json:"id,omitempty"`
}

type Chiteilnehmer struct {
	Chifb []*Chifb `xml:" fb,omitempty" json:"fb,omitempty"`
}

type Chifb struct {
	Chiid  []*Chiid  `xml:" id,omitempty" json:"id,omitempty"`
	Chisem []*Chisem `xml:" sem,omitempty" json:"sem,omitempty"`
}

type Chihoerer struct {
	Chiid []*Chiid `xml:" id,omitempty" json:"id,omitempty"`
}

type Chiassistenten struct {
	Chifb []*Chifb `xml:" fb,omitempty" json:"fb,omitempty"`
}

///////////////////////////
